var vtkSphereMapperVS = "//VTK::System::Dec\r\n\r\n/*=========================================================================\r\n\r\n  Program:   Visualization Toolkit\r\n  Module:    vtkSphereMapperVS.glsl\r\n\r\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\r\n  All rights reserved.\r\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\r\n\r\n     This software is distributed WITHOUT ANY WARRANTY; without even\r\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\r\n     PURPOSE.  See the above copyright notice for more information.\r\n\r\n=========================================================================*/\r\n// this shader implements imposters in OpenGL for Spheres\r\n\r\nattribute vec4 vertexMC;\r\nattribute vec2 offsetMC;\r\n\r\n// optional normal declaration\r\n//VTK::Normal::Dec\r\n\r\n//VTK::Picking::Dec\r\n\r\n// Texture coordinates\r\n//VTK::TCoord::Dec\r\n\r\nuniform mat3 normalMatrix; // transform model coordinate directions to view coordinates\r\n\r\n// material property values\r\n//VTK::Color::Dec\r\n\r\n// clipping plane vars\r\n//VTK::Clip::Dec\r\n\r\n// camera and actor matrix values\r\n//VTK::Camera::Dec\r\n\r\nvarying vec4 vertexVCVSOutput;\r\nvarying float radiusVCVSOutput;\r\nvarying vec3 centerVCVSOutput;\r\n\r\nuniform int cameraParallel;\r\nuniform float scaleFactor;\r\n\r\nvoid main()\r\n{\r\n  //VTK::Picking::Impl\r\n\r\n  //VTK::Color::Impl\r\n\r\n  //VTK::Normal::Impl\r\n\r\n  //VTK::TCoord::Impl\r\n\r\n  //VTK::Clip::Impl\r\n\r\n  // compute the projected vertex position\r\n  vec2 scaledOffsetMC = scaleFactor * offsetMC;\r\n  vertexVCVSOutput = MCVCMatrix * vertexMC;\r\n  centerVCVSOutput = vertexVCVSOutput.xyz;\r\n  radiusVCVSOutput = length(scaledOffsetMC)*0.5;\r\n\r\n  // make the triangle face the camera\r\n  if (cameraParallel == 0)\r\n    {\r\n    vec3 dir = normalize(-vertexVCVSOutput.xyz);\r\n    vec3 base2 = normalize(cross(dir,vec3(1.0,0.0,0.0)));\r\n    vec3 base1 = cross(base2,dir);\r\n    vertexVCVSOutput.xyz = vertexVCVSOutput.xyz + scaledOffsetMC.x*base1 + scaledOffsetMC.y*base2;\r\n    }\r\n  else\r\n    {\r\n    // add in the offset\r\n    vertexVCVSOutput.xy = vertexVCVSOutput.xy + scaledOffsetMC;\r\n    }\r\n\r\n  gl_Position = VCPCMatrix * vertexVCVSOutput;\r\n}\r\n";

export { vtkSphereMapperVS as v };
