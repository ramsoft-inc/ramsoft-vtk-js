var vtkStickMapperVS = "//VTK::System::Dec\r\n\r\n/*=========================================================================\r\n\r\n  Program:   Visualization Toolkit\r\n  Module:    vtkStickMapperVS.glsl\r\n\r\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\r\n  All rights reserved.\r\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\r\n\r\n     This software is distributed WITHOUT ANY WARRANTY; without even\r\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\r\n     PURPOSE.  See the above copyright notice for more information.\r\n\r\n=========================================================================*/\r\n// this shader implements imposters in OpenGL for Sticks\r\n\r\nattribute vec4 vertexMC;\r\nattribute vec3 orientMC;\r\nattribute vec4 offsetMC;\r\nattribute float radiusMC;\r\n\r\n// optional normal declaration\r\n//VTK::Normal::Dec\r\n\r\n//VTK::Picking::Dec\r\n\r\n// Texture coordinates\r\n//VTK::TCoord::Dec\r\n\r\nuniform mat3 normalMatrix; // transform model coordinate directions to view coordinates\r\n\r\n// material property values\r\n//VTK::Color::Dec\r\n\r\n// clipping plane vars\r\n//VTK::Clip::Dec\r\n\r\n// camera and actor matrix values\r\n//VTK::Camera::Dec\r\n\r\nvarying vec4 vertexVCVSOutput;\r\nvarying float radiusVCVSOutput;\r\nvarying float lengthVCVSOutput;\r\nvarying vec3 centerVCVSOutput;\r\nvarying vec3 orientVCVSOutput;\r\n\r\nuniform int cameraParallel;\r\n\r\nvoid main()\r\n{\r\n  //VTK::Picking::Impl\r\n\r\n  //VTK::Color::Impl\r\n\r\n  //VTK::Normal::Impl\r\n\r\n  //VTK::TCoord::Impl\r\n\r\n  //VTK::Clip::Impl\r\n\r\n  vertexVCVSOutput = MCVCMatrix * vertexMC;\r\n  centerVCVSOutput = vertexVCVSOutput.xyz;\r\n  radiusVCVSOutput = radiusMC;\r\n  lengthVCVSOutput = length(orientMC);\r\n  orientVCVSOutput = normalMatrix * normalize(orientMC);\r\n\r\n  // make sure it is pointing out of the screen\r\n  if (orientVCVSOutput.z < 0.0)\r\n    {\r\n    orientVCVSOutput = -orientVCVSOutput;\r\n    }\r\n\r\n  // make the basis\r\n  vec3 xbase;\r\n  vec3 ybase;\r\n  vec3 dir = vec3(0.0,0.0,1.0);\r\n  if (cameraParallel == 0)\r\n    {\r\n    dir = normalize(-vertexVCVSOutput.xyz);\r\n    }\r\n  if (abs(dot(dir,orientVCVSOutput)) == 1.0)\r\n    {\r\n    xbase = normalize(cross(vec3(0.0,1.0,0.0),orientVCVSOutput));\r\n    ybase = cross(xbase,orientVCVSOutput);\r\n    }\r\n  else\r\n    {\r\n    xbase = normalize(cross(orientVCVSOutput,dir));\r\n    ybase = cross(orientVCVSOutput,xbase);\r\n    }\r\n\r\n  vec3 offsets = offsetMC.xyz*2.0-1.0;\r\n  vertexVCVSOutput.xyz = vertexVCVSOutput.xyz +\r\n    radiusVCVSOutput*offsets.x*xbase +\r\n    radiusVCVSOutput*offsets.y*ybase +\r\n    0.5*lengthVCVSOutput*offsets.z*orientVCVSOutput;\r\n\r\n  gl_Position = VCPCMatrix * vertexVCVSOutput;\r\n}\r\n";

export { vtkStickMapperVS as v };
