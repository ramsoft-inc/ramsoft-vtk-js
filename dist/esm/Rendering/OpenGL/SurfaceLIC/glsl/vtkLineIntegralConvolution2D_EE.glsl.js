var vtkLineIntegralConvolution2D_EE = "//VTK::System::Dec\r\n\r\n//=========================================================================\r\n//\r\n//  Program:   Visualization Toolkit\r\n//  Module:    vtkLineIntegralConvolution2D_fs2.glsl\r\n//\r\n//  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\r\n//  All rights reserved.\r\n//  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\r\n//\r\n//     This software is distributed WITHOUT ANY WARRANTY; without even\r\n//     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\r\n//     PURPOSE.  See the above copyright notice for more information.\r\n//\r\n//=========================================================================\r\n\r\n// high-pass filter stage employed by vtkLineIntegralConvolution2D\r\n// between LIC pass 1 and LIC pass 2. filtered LIC pass 1, becomes\r\n// noise for pass2.\r\n\r\n// the output of this shader\r\nlayout(location = 0) out vec4 EEOutput;\r\n\r\nuniform sampler2D texLIC; // most recent lic pass\r\nuniform float     uDx;    // fragment size\r\nuniform float     uDy;    // fragment size\r\n\r\nin vec2 tcoordVC;\r\n\r\n// kernel for simple laplace edge enhancement.\r\n// p=Laplace(p)+p\r\nfloat K[9] = float[9](\r\n  -1.0, -1.0, -1.0,\r\n  -1.0,  9.0, -1.0,\r\n  -1.0, -1.0, -1.0\r\n  );\r\n\r\n// determine if the fragment was masked\r\nbool Masked(float val) { return val != 0.0; }\r\n\r\nvoid main(void)\r\n{\r\n  // tex coord neighbor offsets\r\n  vec2 fragDx[9] = vec2[9](\r\n    vec2(-uDx, uDy), vec2(0.0, uDy), vec2(uDx, uDy),\r\n    vec2(-uDx, 0.0), vec2(0.0, 0.0), vec2(uDx, 0.0),\r\n    vec2(-uDx,-uDy), vec2(0.0,-uDy), vec2(uDx,-uDy)\r\n    );\r\n\r\n  vec2 lictc = tcoordVC.st;\r\n\r\n  // compute the convolution but don't use convovled values if\r\n  // any masked fragments on the stencil. Fragments outside\r\n  // the valid domain are masked during initialization, and\r\n  // texture wrap parameters are clamp to border with border\r\n  // color that contains masked flag\r\n  float conv = 0.0;\r\n  bool dontUse = false;\r\n  for (int i=0; i<9; ++i)\r\n    {\r\n    vec2 tc = lictc + fragDx[i];\r\n    vec4 lic = texture2D(texLIC, tc);\r\n    dontUse = dontUse || Masked(lic.g);\r\n    conv = conv + K[i] * lic.r;\r\n    }\r\n\r\n  if (dontUse)\r\n    {\r\n    EEOutput = vec4(texture2D(texLIC, lictc).rg, 0.0, 1.0);\r\n    }\r\n  else\r\n    {\r\n    conv = clamp(conv, 0.0, 1.0);\r\n    EEOutput = vec4(conv,texture2D(texLIC, lictc).g, 0.0, 1.0);\r\n    }\r\n\r\n}\r\n";

export { vtkLineIntegralConvolution2D_EE as v };
